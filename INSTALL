Overview
============

fish is written in a sane subset of C++98, and uses a few components from C++TR1. It is known to build successfully with g++ 4.2 or later, and with clang 4.2. It also builds successfully as C++11.

Prerequisites
=============

fish requires the following programs and libraries to build:

 - GNU make or Xcode tools
 - GCC or clang
 - curses or ncurses
 
 It will also use if available:
 
  - Doxygen

fish also relies on standard unix tools such as cat, cut, grep, sed,
whoami, bc and echo.

Simple install procedure
========================

Always begin by uninstalling any previous fish versions. This is done
by running the command 'make uninstall' in the source directory of
your previous fish installation.

Autotools Build and Install
========================

    autoconf              # Create configure file
    ./configure           # Generate Makefile
    make [gmake on BSD]   # Compile fish
    sudo make install     # Install fish

configure supports the ---prefix option, for example:

    ./configure --prefix=$HOME

If fish reports that it could not find curses, try installing a curses development package and build again.

On Debian or Ubuntu you want:

	sudo apt-get install libncurses5-dev libncursesw5-dev

on RedHat, CentOS, or Amazon EC2:

    sudo yum install ncurses-devel

Xcode Development Build
========================

Build the 'base' target in Xcode
Run the fish executable, for example, in DerivedData/fish/Build/Products/Debug/base/bin/fish

Xcode Build and Install
========================

    xcodebuild install
    sudo ditto /tmp/fish.dst /

Starting fish
========================

If you wish to use fish as your default shell, use the
following command:

 % chsh -s /usr/local/bin/fish

chsh will prompt you for your password, and change your default shell.

To switch your default shell back, you can run:

 % chsh -s /bin/bash

Substitute /bin/bash with /bin/tcsh or /bin/zsh as appropriate.

